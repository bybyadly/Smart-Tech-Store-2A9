#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "produit.h"
#include <QMessageBox>
#include <QIntValidator>
#include <QtCharts>
#include <QPieSlice>
#include <QPieSeries>
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->tab_produits->setModel(Pro.afficher());
    ui->le_id->setValidator(new QIntValidator(0,999999,this));
    ui->le_prix->setValidator(new QIntValidator(0,99999,this));

    ui->tab_produits->setModel(Pro.afficher());
    ui->new_id->setValidator(new QIntValidator(0,99999,this));
    ui->newprix->setValidator(new QIntValidator(0,99999,this));

}

MainWindow::~MainWindow()
{

    delete ui;
}

void MainWindow::on_pb_ajouter_clicked()
{
    int PRIX=ui->le_prix->text().toInt();
    int ID=ui->le_id->text().toInt();
    QString NOM=ui->le_nom->text();
    QString IMAGE=ui->la_image->text();
    QString DESCRIPTION=ui->la_description->text();

   Produit P(ID,IMAGE,NOM,PRIX,DESCRIPTION);
   bool test = P.ajouter();
   if (test){
           ui->tab_produits->setModel(Pro.afficher());
           QMessageBox::information(nullptr, QObject::tr("Database is open"),
                                 QObject::tr("Ajout effectué"),
                                 QMessageBox::Ok
                                 );
       }else{
           QMessageBox::critical(nullptr, QObject::tr("Database is not open"),
                                 QObject::tr("Ajouter non effectué"),
                                 QMessageBox::Cancel
                                 );
       }

}



void MainWindow::on_pb_supprimer_clicked()
{
    Produit p1;
    p1.setid(ui->le_id_sup->text().toInt());
    bool test=p1.supprimer(p1.getid());
    QMessageBox msgbox;

    if (test){
            ui->tab_produits->setModel(Pro.afficher());
            QMessageBox::information(nullptr, QObject::tr("Database is open"),
                                  QObject::tr("Suppression effectuée"),
                                  QMessageBox::Ok
                                  );
        }else{
            QMessageBox::critical(nullptr, QObject::tr("Database is not open"),
                                  QObject::tr("Suppression non effectuée"),
                                  QMessageBox::Cancel
                                  );
        }
}

void MainWindow::on_pb_afficher_clicked()
{
    ui->tab_produits->setModel(Pro.afficher());
}

void MainWindow::on_pb_exit_clicked()
{
    exit(EXIT_FAILURE);
}

void MainWindow::on_pb_modifier_clicked()
{
    int newPRIX=ui->newprix->text().toInt();
    int newID=ui->new_id->text().toInt();
    QString newNOM=ui->newname->text();
    QString newIMAGE=ui->newimage->text();
    QString newDESC=ui->newdesc->text();

   Produit P(newID,newIMAGE,newNOM,newPRIX,newDESC);

   bool test = P.modifier();
   if (test){
           ui->tab_produits->setModel(Pro.afficher());
           QMessageBox::information(nullptr, QObject::tr("Database is open"),
                                 QObject::tr("Modification effectuée"),
                                 QMessageBox::Ok
                                 );
       }else{
           QMessageBox::critical(nullptr, QObject::tr("Database is not open"),
                                 QObject::tr("Modification non effectuée"),
                                 QMessageBox::Cancel
                                 );
       }
}

void MainWindow::on_pb_tridecroi_clicked()
{
         ui->tab_produits->setModel(Pro.Tridecroi());

}

void MainWindow::on_pb_tricroi_clicked()
{
    ui->tab_produits->setModel(Pro.Tricroi());
}



void MainWindow::on_pb_rechercher_clicked()
{
    QString rech= ui->recherche->text();

        ui->tab_produits->setModel(Pro.recherche(rech));
}

void MainWindow::on_pb_pdf_clicked()
{



     int PRIX=ui->le_prix->text().toInt();
     int ID=ui->le_id->text().toInt();
     QString NOM=ui->le_nom->text();
     QString IMAGE=ui->la_image->text();
     QString DESCRIPTION=ui->la_description->text();

    Produit P(ID,IMAGE,NOM,PRIX,DESCRIPTION);
    P.printPDF();
}

void MainWindow::on_pb_stats_clicked()
{
    QSqlQueryModel * model= new QSqlQueryModel();
                         model->setQuery("select * from RDV where NUM_RDV < 10 ");
                         float NUM_RDV1=model->rowCount();
                         model->setQuery("select * from RDV where NUM_RDV  between 10 and 20 ");
                         float NUM_RDV2=model->rowCount();
                         model->setQuery("select * from RDV where NUM_RDV >20 ");
                         float NUM_RDV3=model->rowCount();
                         float total=NUM_RDV1+NUM_RDV2+NUM_RDV3;
                         QString a=QString("inferieur a 10  "+QString::number((NUM_RDV1*100)/total,'f',2)+"%" );
                         QString b=QString("entre 10 et 20  "+QString::number((NUM_RDV2*100)/total,'f',2)+"%" );
                         QString c=QString("+20  "+QString::number((NUM_RDV3*100)/total,'f',2)+"%" );
                         QPieSeries *series = new QPieSeries();
                         series->append(a,NUM_RDV1);
                         series->append(b,NUM_RDV2);
                         series->append(c,NUM_RDV3);
                 if (NUM_RDV1!=0)
                 {QPieSlice *slice = series->slices().at(0);
                  slice->setLabelVisible();
                  slice->setPen(QPen());}
                 if ( NUM_RDV2!=0)
                 {
                          // Add label, explode and define brush for 2nd slice
                          QPieSlice *slice1 = series->slices().at(1);
                          //slice1->setExploded();
                          slice1->setLabelVisible();
                 }
                 if(NUM_RDV3!=0)
                 {
                          // Add labels to rest of slices
                          QPieSlice *slice2 = series->slices().at(2);
                          //slice1->setExploded();
                          slice2->setLabelVisible();
                 }
                         // Create the chart widget
                         QChart *chart = new QChart();
                         // Add data to chart with title and hide legend
                         chart->addSeries(series);
                         chart->setTitle("Pourcentage Par num :Numero rendez-vous "+ QString::number(total));
                         chart->legend()->hide();
                         // Used to display the chart
                         QChartView *chartView = new QChartView(chart);
                         chartView->setRenderHint(QPainter::Antialiasing);
                         chartView->resize(1000,500);
                         chartView->show();
}
